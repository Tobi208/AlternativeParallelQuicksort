--------------------------------------------------------------------------------
Profile data file 'callgrind.out.173951' (creator: callgrind-3.18.1)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 26276369
Trigger: Program termination
Profiled target:  ./matmul (PID 173951, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
779,464,717 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
320,841,816 (41.16%)  matmul.c:mul_kij [/home/tola9583/hpp/seminar1/lab4/Task-5/matmul]
224,881,816 (28.85%)  matmul.c:mul_ijk [/home/tola9583/hpp/seminar1/lab4/Task-5/matmul]
224,881,816 (28.85%)  matmul.c:mul_jik [/home/tola9583/hpp/seminar1/lab4/Task-5/matmul]
  2,549,680 ( 0.33%)  ./stdlib/./stdlib/random_r.c:random_r [/usr/lib/x86_64-linux-gnu/libc.so.6]

--------------------------------------------------------------------------------
-- Auto-annotated source: matmul.c
--------------------------------------------------------------------------------
Ir                   

          .           #include <stdio.h>
          .           #include <stdlib.h>
          .            
          .           int rand_int(int N)
    400,000 ( 0.05%)  {
     80,000 ( 0.01%)    int val = -1;
    640,000 ( 0.08%)    while( val < 0 || val >= N )
          .               {
    880,000 ( 0.11%)        val = (int)(N * (double)rand()/RAND_MAX);
  4,789,680 ( 0.61%)  => ???:0x00000000001090f0 (80,000x)
          .               }
     80,000 ( 0.01%)    return val;
    160,000 ( 0.02%)  }
          .           
          .           void allocate_mem(int*** arr, int n)
         21 ( 0.00%)  {
          .             int i;
         24 ( 0.00%)    *arr = (int**)malloc(n*sizeof(int*));
        573 ( 0.00%)  => ???:0x00000000001090d0 (3x)
      2,415 ( 0.00%)    for(i=0; i<n; i++)
      7,200 ( 0.00%)      (*arr)[i] = (int*)malloc(n*sizeof(int));
    109,677 ( 0.01%)  => ???:0x00000000001090d0 (600x)
         15 ( 0.00%)  }
          .           
          .           void free_mem(int** arr, int n)
         18 ( 0.00%)  {
          .             int i;
      2,415 ( 0.00%)    for(i=0; i<n; i++)
      4,800 ( 0.00%)      free(arr[i]);
    109,497 ( 0.01%)  => ???:0x00000000001090a0 (600x)
          9 ( 0.00%)    free(arr);
        656 ( 0.00%)  => ???:0x00000000001090a0 (3x)
          9 ( 0.00%)  }
          .           
          .           /* kij */
          .           void mul_kij(int n, int **a, int **b, int **c)
          7 ( 0.00%)  {
          .             int i, j, k;
        805 ( 0.00%)    for (k=0; k<n; k++) {
    161,000 ( 0.02%)      for (i=0; i<n; i++) {
    480,000 ( 0.06%)        int x = a[i][k];
 32,200,000 ( 4.13%)        for (j=0; j<n; j++)
288,000,000 (36.95%)  	c[i][j] += x * b[k][j];   
          .               }
          .             }
          4 ( 0.00%)  }
          .           
          .           /* ijk */
          .           void mul_ijk(int n, int **a, int **b, int **c)
          7 ( 0.00%)  {
          .             int i, j, k;
        805 ( 0.00%)    for (i=0; i<n; i++)  {
    161,000 ( 0.02%)      for (j=0; j<n; j++) {
     40,000 ( 0.01%)        int sum = 0;
 32,200,000 ( 4.13%)        for (k=0; k<n; k++) 
192,000,000 (24.63%)  	sum += a[i][k] * b[k][j];
    480,000 ( 0.06%)        c[i][j] = sum;
          .               }
          .             }
          4 ( 0.00%)  }
          .           
          .           /* jik */
          .           void mul_jik(int n, int **a, int **b, int **c)
          7 ( 0.00%)  {
          .             int i, j, k;
        805 ( 0.00%)    for (j=0; j<n; j++) {
    161,000 ( 0.02%)      for (i=0; i<n; i++) {
     40,000 ( 0.01%)        int sum = 0;
 32,200,000 ( 4.13%)        for (k=0; k<n; k++)
192,000,000 (24.63%)  	sum += a[i][k] * b[k][j];
    480,000 ( 0.06%)        c[i][j] = sum;
          .               }
          .             }
          4 ( 0.00%)  }
          .           
          .           int main()
          8 ( 0.00%)  {
          .             int i, j, n;
          .             int **a;
          .             int **b;
          .             int **c;
          1 ( 0.00%)    int Nmax = 100; // random numbers in [0, N]
          .           
          3 ( 0.00%)    printf("Enter the dimension of matrices\n");
      4,025 ( 0.00%)  => ???:0x00000000001090b0 (1x)
          8 ( 0.00%)    if(scanf("%d", &n) != 1) {
      1,255 ( 0.00%)  => ???:0x00000000001090e0 (1x)
          .               printf("Error in scanf.\n");
          .               return -1;
          .             }
          .           
          5 ( 0.00%)    allocate_mem(&a, n);
     39,975 ( 0.01%)  => matmul.c:allocate_mem (1x)
          .            
        805 ( 0.00%)    for ( i = 0 ; i < n ; i++ )
    161,000 ( 0.02%)      for ( j = 0 ; j < n ; j++ )
    560,000 ( 0.07%)        a[i][j] = rand_int(Nmax);
  3,514,840 ( 0.45%)  => matmul.c:rand_int (40,000x)
          .           
          5 ( 0.00%)    allocate_mem(&b, n);
     39,975 ( 0.01%)  => matmul.c:allocate_mem (1x)
          .            
        805 ( 0.00%)    for ( i = 0 ; i < n ; i++ )
    161,000 ( 0.02%)      for ( j = 0 ; j < n ; j++ )
    560,000 ( 0.07%)        b[i][j] = rand_int(Nmax);
  3,514,840 ( 0.45%)  => matmul.c:rand_int (40,000x)
          .           
          5 ( 0.00%)    allocate_mem(&c, n);
     39,975 ( 0.01%)  => matmul.c:allocate_mem (1x)
          .           
          6 ( 0.00%)    mul_kij(n, a, b, c);
320,841,816 (41.16%)  => matmul.c:mul_kij (1x)
          3 ( 0.00%)    printf("Version kij is finished...\n");
        474 ( 0.00%)  => ???:0x00000000001090b0 (1x)
          6 ( 0.00%)    mul_ijk(n, a, b, c);
224,881,816 (28.85%)  => matmul.c:mul_ijk (1x)
          3 ( 0.00%)    printf("Version ijk is finished...\n");
        474 ( 0.00%)  => ???:0x00000000001090b0 (1x)
          6 ( 0.00%)    mul_jik(n, a, b, c);
224,881,816 (28.85%)  => matmul.c:mul_jik (1x)
          3 ( 0.00%)    printf("Version jik is finished...\n");
        474 ( 0.00%)  => ???:0x00000000001090b0 (1x)
          .           
          .             /*
          .               printf("Product of entered matrices:\n");
          .            
          .               for ( i = 0 ; i < n ; i++ )
          .               {
          .               for ( j = 0 ; j < n ; j++ )
          .               printf("%d\t", c[i][j]);
          .            
          .               printf("\n");
          .               }
          .             */
          .           
          5 ( 0.00%)    free_mem(a, n);
     38,552 ( 0.00%)  => matmul.c:free_mem (1x)
          5 ( 0.00%)    free_mem(b, n);
     39,304 ( 0.01%)  => matmul.c:free_mem (1x)
          5 ( 0.00%)    free_mem(c, n);
     39,548 ( 0.01%)  => matmul.c:free_mem (1x)
          .           
          1 ( 0.00%)    return 0;
          6 ( 0.00%)  }

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
774,306,068 (99.34%)  events annotated


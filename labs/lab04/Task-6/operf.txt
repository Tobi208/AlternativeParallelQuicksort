/* 
 * Command line: opannotate --source 
 * 
 * Interpretation of command line:
 * Output annotated source file with samples
 * Output all files
 * 
 * CPU: AMD64 family15h, speed 2600.04 MHz (estimated)
 * Counted CPU_CLK_UNHALTED events (CPU Clocks not Halted) with a unit mask of 0x00 (No unit mask) count 100000
 */
/* 
 * Total samples for file : "/home/tola9583/hpp/seminar1/lab4/Task-6/matmul.c"
 * 
 * 720140 99.4073
 */


               :#include <stdio.h>
               :#include <stdlib.h>
               : 
               :int rand_int(int N)
    39  0.0054 :{ /* rand_int total:    236  0.0326 */
    18  0.0025 :  int val = -1;
    52  0.0072 :  while( val < 0 || val >= N )
               :    {
    93  0.0128 :      val = (int)(N * (double)rand()/RAND_MAX);
               :    }
    23  0.0032 :  return val;
    11  0.0015 :}
               :
               :void allocate_mem(int*** arr, int n)
               :{
               :  int i;
               :  *arr = (int**)malloc(n*sizeof(int*));
               :  for(i=0; i<n; i++)
               :    (*arr)[i] = (int*)malloc(n*sizeof(int));
               :}
               :
               :void free_mem(int** arr, int n)
               :{
               :  int i;
               :  for(i=0; i<n; i++)
               :    free(arr[i]);
               :  free(arr);
               :}
               :
               :/* kij */
               :void mul_kij(int n, int **a, int **b, int **c)
               :{ /* mul_kij total: 202892 28.0070 */
               :  int i, j, k;
               :  for (k=0; k<n; k++) {
   253  0.0349 :    for (i=0; i<n; i++) {
  1521  0.2100 :      int x = a[i][k];
 51861  7.1588 :      for (j=0; j<n; j++)
149257 20.6033 :	c[i][j] += x * b[k][j];   
               :    }
               :  }
               :}
               :
               :/* ijk */
               :void mul_ijk(int n, int **a, int **b, int **c)
               :{ /* mul_ijk total: 261465 36.0923 */
               :  int i, j, k;
               :  for (i=0; i<n; i++)  {
    32  0.0044 :    for (j=0; j<n; j++) {
     9  0.0012 :      int sum = 0;
 32966  4.5506 :      for (k=0; k<n; k++) 
227818 31.4477 :	sum += a[i][k] * b[k][j];
   640  0.0883 :      c[i][j] = sum;
               :    }
               :  }
               :}
               :
               :/* jik */
               :void mul_jik(int n, int **a, int **b, int **c)
               :{ /* mul_jik total: 255406 35.2559 */
               :  int i, j, k;
               :  for (j=0; j<n; j++) {
    48  0.0066 :    for (i=0; i<n; i++) {
     2 2.8e-04 :      int sum = 0;
 33602  4.6384 :      for (k=0; k<n; k++)
220598 30.4511 :	sum += a[i][k] * b[k][j];
  1156  0.1596 :      c[i][j] = sum;
               :    }
               :  }
               :}
               :
               :int main()
               :{ /* main total:    141  0.0195 */
               :  int i, j, n;
               :  int **a;
               :  int **b;
               :  int **c;
               :  int Nmax = 100; // random numbers in [0, N]
               :
               :  printf("Enter the dimension of matrices\n");
               :  if(scanf("%d", &n) != 1) {
               :    printf("Error in scanf.\n");
               :    return -1;
               :  }
               :
               :  allocate_mem(&a, n);
               : 
               :  for ( i = 0 ; i < n ; i++ )
    23  0.0032 :    for ( j = 0 ; j < n ; j++ )
    43  0.0059 :      a[i][j] = rand_int(Nmax);
               :
               :  allocate_mem(&b, n);
               : 
               :  for ( i = 0 ; i < n ; i++ )
    29  0.0040 :    for ( j = 0 ; j < n ; j++ )
    46  0.0063 :      b[i][j] = rand_int(Nmax);
               :
               :  allocate_mem(&c, n);
               :
               :  mul_kij(n, a, b, c);
               :  printf("Version kij is finished...\n");
               :  mul_ijk(n, a, b, c);
               :  printf("Version ijk is finished...\n");
               :  mul_jik(n, a, b, c);
               :  printf("Version jik is finished...\n");
               :
               :  /*
               :    printf("Product of entered matrices:\n");
               : 
               :    for ( i = 0 ; i < n ; i++ )
               :    {
               :    for ( j = 0 ; j < n ; j++ )
               :    printf("%d\t", c[i][j]);
               : 
               :    printf("\n");
               :    }
               :  */
               :
               :  free_mem(a, n);
               :  free_mem(b, n);
               :  free_mem(c, n);
               :
               :  return 0;
               :}
/* 
 * Total samples for file : "malloc.c"
 * 
 *     40  0.0055
 */

<credited to line zero>     40  0.0055 :
 /* unlink_chunk.constprop.0 total:      2 2.8e-04 */
 /* _int_free total:      4 5.5e-04 */
 /* _int_malloc total:     34  0.0047 */
/* 
 * Total samples for file : "dl-sort-maps.c"
 * 
 *      1 1.4e-04
 */

<credited to line zero>      1 1.4e-04 :
 /* dfs_traversal.part.0 total:      1 1.4e-04 */
/* 
 * Total samples for file : "dl-lookup.c"
 * 
 *      1 1.4e-04
 */

<credited to line zero>      1 1.4e-04 :
 /* do_lookup_x total:      1 1.4e-04 */

mul_kij has the least L1 cache read misses

kij has the least read misses because b[k][j] is the most executed read and if k is the out-most loop, consecutive j accesses are already on the cache line

Testing all permutations:

Enter the dimension of matrices n = 500
Version ijk, time = 1.147404
Version ikj, time = 1.068765
Version jik, time = 1.151204
Version jki, time = 2.357846
Version kij, time = 1.088367
Version kji, time = 2.508040

Here, ikj and kij perform similarly. That is because they benefit from the same cache optimization.

I will just take kij for a blocking implementation